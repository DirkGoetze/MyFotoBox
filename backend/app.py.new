import sqlite3
from flask import Flask, request, jsonify, session, redirect, url_for, render_template_string, send_from_directory
import os
import subprocess
import bcrypt
import re

# Importiere das Authentifizierungsmodul
import manage_auth

# -------------------------------------------------------------------------------
# DB_PATH und Datenverzeichnis sicherstellen
# -------------------------------------------------------------------------------
DB_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'data'))
DB_PATH = os.path.join(DB_DIR, 'fotobox_settings.db')
os.makedirs(DB_DIR, exist_ok=True)

app = Flask(__name__)
app.secret_key = os.environ.get('FOTOBOX_SECRET_KEY', 'fotobox_default_secret')

# Cache-Kontrolle für die Testphase
@app.after_request
def add_no_cache_headers(response):
    """
    Fügt No-Cache-Header zu allen Antworten für die Testphase hinzu
    """
    # Prüfe, ob wir uns im Testmodus befinden
    test_mode = os.environ.get('FOTOBOX_TEST_MODE', 'true').lower() == 'true'
    
    if test_mode:
        response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
        
        # Debug-Header hinzufügen, um zu zeigen, dass die Cache-Deaktivierung aktiv ist
        response.headers['X-Fotobox-Test-Mode'] = 'active'
    
    return response

# Datenbank initialisieren (bei jedem Start sicherstellen)
subprocess.run(['python3', os.path.join(os.path.dirname(__file__), 'manage_database.py'), 'init'])

# -------------------------------------------------------------------------------
# check_first_run
# -------------------------------------------------------------------------------
# Funktion: Prüft, ob die Fotobox das erste Mal aufgerufen wird (keine Konfiguration vorhanden)
# Rückgabe: True = erste Inbetriebnahme, False = Konfiguration vorhanden
# -------------------------------------------------------------------------------
def check_first_run():
    return not manage_auth.is_password_set()

# -------------------------------------------------------------------------------
# / (Root-Route)
# -------------------------------------------------------------------------------
@app.route('/')
def root():
    if check_first_run():
        return redirect('/setup.html')
    return send_from_directory('../frontend', 'index.html')

# -------------------------------------------------------------------------------
# /login (GET, POST)
# -------------------------------------------------------------------------------
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        pw = request.form.get('password', '')
        if manage_auth.login(pw):
            return redirect(url_for('config'))
        else:
            return render_template_string('<h3>Falsches Passwort!</h3><a href="/login">Zurück</a>')
    return render_template_string('<form method="post">\n        <h3>Fotobox Konfiguration Login</h3>\n        Passwort: <input type="password" name="password" autofocus>\n        <input type="submit" value="Login">\n    </form>')

# -------------------------------------------------------------------------------
# /logout
# -------------------------------------------------------------------------------
@app.route('/logout')
def logout():
    manage_auth.logout()
    return redirect(url_for('login'))

# -------------------------------------------------------------------------------
# /config (GET)
# -------------------------------------------------------------------------------
@app.route('/config')
@manage_auth.login_required
def config():
    if check_first_run():
        return redirect('/setup.html')
    return render_template_string('<h2>Fotobox Konfiguration</h2>\n    <a href="/logout">Logout</a>')

# -------------------------------------------------------------------------------
# /api/login (POST)
# -------------------------------------------------------------------------------
@app.route('/api/login', methods=['POST'])
def api_login():
    data = request.get_json(force=True)
    pw = data.get('password', '')
    if manage_auth.login(pw):
        return jsonify({'success': True})
    else:
        return jsonify({'success': False}), 401

# -------------------------------------------------------------------------------
# /api/settings (GET, POST)
# -------------------------------------------------------------------------------
@app.route('/api/settings', methods=['GET', 'POST'])
def api_settings():
    db = sqlite3.connect(DB_PATH)
    cur = db.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS settings (key TEXT PRIMARY KEY, value TEXT)")
    
    if request.method == 'POST':
        data = request.get_json(force=True)
        # Alle Einstellungen aus dem Frontend verarbeiten
        allowed_keys = [
            'camera_mode', 'resolution_width', 'resolution_height', 
            'storage_path', 'event_name', 'event_date', 'show_splash', 'photo_timer',
            'color_mode', 'screensaver_timeout', 'gallery_timeout',
            'camera_id', 'flash_mode', 'countdown_duration'
        ]
        
        for key in data:
            if key in allowed_keys:
                # Alle Werte als String speichern
                cur.execute("INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)", (key, str(data[key])))
        
        # Admin-Passwort setzen/ändern - Unterstütze sowohl new_password (settings.html) als auch admin_password (install.html)
        password_key = None
        if 'new_password' in data and data['new_password'] and len(data['new_password']) >= 4:
            password_key = 'new_password'
        elif 'admin_password' in data and data['admin_password'] and len(data['admin_password']) >= 4:
            password_key = 'admin_password'
            
        if password_key:
            # Nutze manage_auth zum Setzen des Passworts
            manage_auth.set_password(data[password_key])
        
        db.commit()
        db.close()
        return jsonify({'status': 'ok'})
    # GET
    cur.execute("SELECT key, value FROM settings")
    result = {k: v for k, v in cur.fetchall()}
    # show_splash als bool zurückgeben (Default: '1')
    if 'show_splash' not in result:
        result['show_splash'] = '1'
    if 'photo_timer' not in result:
        result['photo_timer'] = '5'
    db.close()
    return jsonify(result)

# -------------------------------------------------------------------------------
# /api/check_password_set (GET)
# -------------------------------------------------------------------------------
# Funktion: Prüft, ob ein Admin-Passwort gesetzt ist (für Erstinstallation)
# -------------------------------------------------------------------------------
@app.route('/api/check_password_set', methods=['GET'])
def api_check_password_set():
    is_password_set = manage_auth.is_password_set()
    return jsonify({'password_set': is_password_set})

# -------------------------------------------------------------------------------
# /api/session-check (GET)
# -------------------------------------------------------------------------------
@app.route('/api/session-check', methods=['GET'])
def api_session_check():
    """
    Endpunkt zur Überprüfung des Authentifizierungsstatus
    """
    return jsonify(manage_auth.get_login_status())

# Der Rest der Datei bleibt unverändert
